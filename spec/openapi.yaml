openapi: 3.0.1
info:
  title: Prusa Link Web
  description:
    This is a printer connect webservice.
  contact:
    email: developer@prusa3d.cz
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 2.0.0
externalDocs:
  description: Find out more about API
  url: http://connect.prusa3d.cz
security:
  - ApiKeyAuth: [developer]
paths:
  /api/v1.0/info:
    get:
      summary: printer informations
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Info"
        403:
          $ref: "#/components/responses/Unauthorized"
  
  /api/v1.0/status:
    get:
      summary: printer status
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
        403:
          $ref: "#/components/responses/Unauthorized"

  /api/v1.0/files/<path>:
    parameters:
      - in: query
        name: path
        schema:
          type: string
          default: "root"
        description: The path within the location to the file or folder.
    get:
      summary: Retrieve all files’ and folders’ information for the target location.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Files"
        403:
          $ref: "#/components/responses/Unauthorized"
    post:
      summary: Upload file or create folder.
      requestBody:
        content:
          multipart/form-data:
            schema:
              oneOf:
                - $ref: "#/components/schemas/UploadFile"
                - $ref: "#/components/schemas/CreateFolder"
      responses:
        201:
          description: No error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/FileUploaded"
                  - $ref: "#/components/schemas/FolderCreated"
        400:
          $ref: "#/components/responses/BadRequest"
          description: Could not create folder or file not found.
        403:
          $ref: "#/components/responses/Unauthorized"
        409:
          $ref: "#/components/responses/Conflict"
          description: File already exist.
        415:
          $ref: "#/components/responses/UnsupportedMediaType"
        500:
          $ref: "#/components/responses/InternalServerError"
          description: File is too big.

components:
  schemas:
    Info:
      type: object
      properties:
        printer_type:
          type: string
          example: "1.3.1"
        firmware:
          type: string
          example: "3.10.0-4586"
        mmu:
          type: boolean
          example: false
        printer_name:
          type: string
          example: "MuadDib"
        location:
          type: string
          example: "Arrakis"
        hostname:
          type: string
          example: "prusa-mini.lan"

    Status:
      type: object
      properties:
        state:
          type: string
          example: "PRINTING"
        telemetry:
          $ref: "#/components/schemas/Telemetry"
        job:
          $ref: "#/components/schemas/Job"

    Telemetry:
      type: object
      properties:
        temp_nozzle:
          type: number
          example: 242.2
        target_nozzle:
          type: number
          example: 250.0
        temp_bed:
          type: number
          example: 94.2
        target_bed:
          type: number
          example: 100.0
        axis_x:
          type: number
          example: 50.0
        axis_y:
          type: number
          example: 190.0
        axis_z:
          type: number
          example: 20.15
        fan_extruder:
          type: integer
          example: 3820
        target_fan_extruder:
          type: integer
          example: 3840
        fan_print:
          type: integer
          example: 3180
        target_fan_print:
          type: integer
          example: 3200
        progress:
          type: number
          example: 0.42
        time_printing:
          type: integer
          example: 20
        time_estimated:
          type: integer
          example: 100
        job_id:
          type: integer
          example: 42

    Job:
      type: object
      properties:
        name:
          type: string
          example: "Castle_0.15mm_PLA_2m.gcode"
        path:
          type: string
          example: "/Prusa Link gcodes/Castle_0.15mm_PLA_2m.gcode"
        size:
          type: integer
          example: 71421
        start:
          type: integer
          example: 1643977846
        time_estimated:
          type: integer
          example: 100
          
    Files:
      type: object
      properties:
        files:
          type: object
          properties:
            free:
              type: string
              example: "122 G"
            0:
              type: object
              properties:
                name:
                  type: string
                  example: "Prusa Link gcodes"
                path:
                  type: string
                  example: "/Prusa Link gcodes"
                date:
                  type: integer
                  example: 16443224493
                size:
                  type: integer
                  example: 206507519
                type:
                  type: string
                  example: "folder"
                children:
                  type: object
            1:
              type: object
              properties:
                name:
                  type: string
                  example: "SD Card"
                path:
                  type: string
                  example: "/SD Card"
                date:
                  type: integer
                  example: null
                size:
                  type: integer
                  example: 346664101
                type:
                  type: string
                  example: "folder"
                children:
                  type: object

    CreateFolder:
      properties:
        path:
          type: string
          description: The path within the location to upload the file to or create the folder.
        foldername:
          type: string
          description: The name of the folder to create. Ignored when uploading a file.
      required:
        - path
        - foldername

    UploadFile:
      properties:
        path:
          type: string
          default: subfolder
          description: The path within the location to upload the file to or create the folder.
        file:
          type: string
          format: binary
          default: test.gcode
          description: The file to upload, including a valid filename.
        select:
          type: string
          default: true
          description: Whether to select the file directly after upload (true) or not (false). Defaults to true.
      required:
        - path
        - file

    FileUploaded:
      type: object
      properties:
        done:
          type: boolean
        files:
          type: object
          properties:
            local:
              type: object
              properties:
                name:
                  type: string
                  example: harry_potter_hogwarts_a_mohimont.sl1
                origin:
                  type: string
                  example: local
                path:
                  type: string
                  example: internal/examples/harry_potter_hogwarts_a_mohimont.sl1
                refs:
                  type: object
                  properties:
                    resource:
                      type: string
                      example: http://localhost/api/files/local/internal/examples/harry_potter_hogwarts_a_mohimont.sl1
                    download:
                      type: string
                      example: http://localhost/api/downloads/local/internal/examples/harry_potter_hogwarts_a_mohimont.sl1

    FolderCreated:
      type: object
      properties:
        done:
          type: boolean
        folder:
          type: object
          properties:
            name:
              type: string
            origin:
              type: string
            path:
              type: string
            refs:
              type: object
              properties:
                resource:
                  type: string

    Error:
      type: object
      properties:
        code:
          type: string
          description: Prusa error code. Must be string if we will have printer with code for example 04
          example: "10108"
        title:
          type: string
          description: Prusa error text string with prefiled variable macros.
          example: "RESIN TOO LOW"
        text:
          type: string
          description: Prusa error text string with prefiled variable macros.
          example: "Measured resin volume 22.4 ml is lower than required for this print. Refill the tank and restart the print."
        url:
          type: string
          description: Link to the Prusa help page
          example: "https://help.prusa3d.com/en/10108/LHE3Q0I1"
      required:
        - title
        - text

    ResponsePlaintext:
      type: string
      default: "Project with same name has been already uploaded."
      description: Prusa error message (raw_message)

  headers:
    Accept: # Slicer doesn't have to use this. If the header is not present, it defaults to: text/plain
      required: false
      schema:
        type: string
        default: application/json
      description: Parameter specifying supported data format from client. PCL has to support it
    Content-Location:
      required: true
      schema:
        type: string
        default: "http://<PCL IP>/error"
      description: URI path to nice error page. We can send URI to help.prusa3d.com in the future.

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  responses:
    NotModified: # 304
      description: Not Modified
      headers:
        Content-Location:
          $ref: "#/components/headers/Content-Location"
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/ResponsePlaintext"
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    BadRequest: # 400
      description: Bad Request
      headers:
        Content-Location:
          $ref: "#/components/headers/Content-Location"
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/ResponsePlaintext"
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Unauthorized: # 401
      description: Unauthorized
      headers:
        Content-Location:
          $ref: "#/components/headers/Content-Location"
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/ResponsePlaintext"
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Forbidden: # 403
      description: Forbidden
      headers:
        Content-Location:
          $ref: "#/components/headers/Content-Location"
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/ResponsePlaintext"
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    NotFound: # 404
      description: Not Found
      headers:
        Content-Location:
          $ref: "#/components/headers/Content-Location"
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/ResponsePlaintext"
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Conflict: # 409
      description: Conflict
      headers:
        Content-Location:
          $ref: "#/components/headers/Content-Location"
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/ResponsePlaintext"
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    UnsupportedMediaType: # 415
      description: Unsupported Media Type
      headers:
        Content-Location:
          $ref: "#/components/headers/Content-Location"
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/ResponsePlaintext"
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    InternalServerError: # 500
      description: Internal Server Error
      headers:
        Content-Location:
          $ref: "#/components/headers/Content-Location"
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/ResponsePlaintext"
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    NotImplemented: # 501
      description: Not Implemented
      headers:
        Content-Location:
          $ref: "#/components/headers/Content-Location"
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/ResponsePlaintext"
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  
  
  
  
  
  
